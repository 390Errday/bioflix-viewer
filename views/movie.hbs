<div class="graph-section">
  <div class="card-graph mdl-card mdl-shadow--2dp">
    <div id="raw" class="container"></div>
  </div>
</div>

<div class="graph-section">
  <div class="card-graph mdl-card mdl-shadow--2dp">
    <div id="hr" class="container"></div>
  </div>
</div>

<script>
function unmergeArray(merged, callback) {
  if(!merged){
    callback('', '');
  }
  else {
    var data = '';
    var times = '';
    for(pair of merged) {
      data += ',' + pair[1];
      times += ',' + pair[0];
    }
    data = data.slice(1);
    times = times.slice(1);
    callback(data, times)
  }
}

var merged = {};

{{#if sessions.hr}}
  merged.hr = {{sessions.hr}};
{{/if}}

{{#if sessions.gsr}}
  merged.gsr = {{sessions.gsr}};
{{/if}}

{{#if sessions.temp}}
  merged.temp = {{sessions.temp}};
{{/if}}

unmergeArray(merged.hr, function(hr_data, hr_times){
  unmergeArray(merged.gsr, function(gsr_data, gsr_times){
    unmergeArray(merged.temp, function(temp_data, temp_times){
      var request = {
        "movie_name": "{{movie.movie_name}}",
        "poster_url": "{{movie.poster_url}}",
        "viewer_name": "{{sessions.viewer_name}}",
        "start_time": "{{sessions.start_time}}",
        "end_time": "{{sessions.end_time}}",
        "hr_data": hr_data,
        "hr_times": hr_times,
        "gsr_data": gsr_data,
        "gsr_times": gsr_times,
        "temp_data": temp_data,
        "temp_times": temp_times
      }

      console.log(request);                     // easier to read
      console.log(JSON.stringify(request));     // easier to reupload
    });
  });
});
</script>

<script>
function average(data) {
  var avg = [];
  var beginning_index;
  var sum = 0;

  for(var i=0; i<data.length; i++) {
    var current = data[i];

    var isLastPoint = (i === data.length-1);

    if(!beginning_index) {
      beginning_index = i;
      sum += current[1];
    } else if(current[0] >= (data[beginning_index][0] + 180000) || isLastPoint) {
      var local_avg = sum/(i-beginning_index);

      avg.push([data[beginning_index][0], local_avg]);
      if(isLastPoint) { //complete the end of the graph
        avg.push([data[i][0], local_avg]);
      }

      beginning_index = undefined;
      sum = 0;
    } else {
      sum += current[1];
    }
  }

  return avg;
}

$('#raw').highcharts({
    chart: {
      zoomType: 'xy'
    },
    title: {
      text: '{{movie.movie_name}}'
    },
    tooltip: {
        shared: true,
        crosshairs: true
    },
    xAxis: [{
      labels: {
        format: '{value:%H:%M:%S}',
        rotation: 45,
        align: 'left'
      },
      crosshair: true
    }],
    yAxis: [

{{#if sessions.hr}}
      { // Primary yAxis
      labels: {
        format: '{value} bpm',
        style: {
          color: Highcharts.getOptions().colors[5]
        }
      },
      title: {
        text: 'Heart Rate',
        style: {
          color: Highcharts.getOptions().colors[5]
        }
      }
    }
{{/if}}

{{#if sessions.gsr}}
{{#if sessions.hr}} , {{/if}}
    { // Secondary yAxis
      title: {
        text: 'Galvanic Skin Response',
        style: {
          color: Highcharts.getOptions().colors[4]
        }
      },
      labels: {
        format: '{value} µS',
        style: {
          color: Highcharts.getOptions().colors[4]
        }
      },
      opposite: true
    }
{{/if}}

{{#if sessions.temp}}
{{#if sessions.hr}} // threw this in quick becaue hbs doesn't have 'or'
  {{#if sessions.gsr}} , {{else}} , {{/if}} // hr and gsr, hr alone
{{else}}
  {{#if sessions.gsr}} , {{else}}   {{/if}} // gsr alone, nothing
{{/if}}
    { // Third yAxis
      title: {
        text: 'Skin Temperature',
        style: {
          color: Highcharts.getOptions().colors[7]
        }
      },
      labels: {
        format: '{value} °C',
        style: {
          color: Highcharts.getOptions().colors[7]
        }
      },
      opposite: true
    }
{{/if}}

    ],
    tooltip: {
      shared: true
    },
    series: [

{{#if sessions.hr}}
    {
      name: 'Heart Rate',
      type: 'line',
      data: {{sessions.hr}},
      tooltip: {
        valueSuffix: ' bpm'
      },
      color: Highcharts.getOptions().colors[5]
    }
{{/if}}

{{#if sessions.gsr}}
{{#if sessions.hr}} , {{/if}}
    {
      name: 'Galvanic Skin Response',
      type: 'line',
      yAxis: {{#if sessions.hr}} 1 {{else}} 0 {{/if}},
      data: {{sessions.gsr}},
      tooltip: {
        valueSuffix: ' µS'
      },
      color: Highcharts.getOptions().colors[4]
    }
{{/if}}

{{#if sessions.temp}}
{{#if sessions.hr}} // threw this in quick becaue hbs doesn't have 'or'
  {{#if sessions.gsr}} , {{else}} , {{/if}} // hr and gsr, hr alone
{{else}}
  {{#if sessions.gsr}} , {{else}}   {{/if}} // gsr alone, nothing
{{/if}}
    {
      name: 'Skin Temperature',
      type: 'line',
      yAxis:
      {{#if sessions.hr}} // threw this in quick becaue hbs doesn't have 'or'
        {{#if sessions.gsr}} 2 {{else}} 1 {{/if}} // hr and gsr, hr alone
      {{else}}
        {{#if sessions.gsr}} 1 {{else}} 0 {{/if}} // gsr alone, nothing
      {{/if}}
      ,
      data: {{sessions.temp}},
      tooltip: {
        valueSuffix: ' °C'
      },
      color: Highcharts.getOptions().colors[7]
    }
{{/if}}
    ]
});

$('#hr').highcharts({
    chart: {
      zoomType: 'xy'
    },
    title: {
      text: '{{movie.movie_name}}'
    },
    tooltip: {
        shared: true,
        crosshairs: true
    },
    xAxis: [{
      labels: {
        format: '{value:%H:%M:%S}',
        rotation: 45,
        align: 'left'
      },
      crosshair: true
    }],
    yAxis: [
      { // Primary yAxis
      labels: {
        format: '{value} bpm',
        style: {
          color: Highcharts.getOptions().colors[5]
        }
      },
      title: {
        text: 'Heart Rate',
        style: {
          color: Highcharts.getOptions().colors[5]
        }
      }
    }],
    tooltip: {
      shared: true
    },
    series: [{
      name: 'Heart Rate Average',
      type: 'line',
      step: 'left',
      data: average({{sessions.hr}}),
      tooltip: {
        valueSuffix: ' bpm'
      },
      zones: [{
        value: 65,
        color: '#99ccff'
      },{
        value: 75,
        color: '#aaaad5'
      },{
        value: 77.5,
        color: '#bb88aa'
      },{
        value: 80,
        color: '#cc6680'
      },{
        value: 82.5,
        color: '#dd4455'
      },{
        value: 85,
        color: '#ee222b'
      },{
        value: 200,
        color: '#ff0000'
      }]
    }]
});
</script>
